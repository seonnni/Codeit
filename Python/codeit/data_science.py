## 데이터 사이언스 시작하기

# 1. 지금 당장 데이터 사이언스를 배워야 하는 이유
# 데이터 사이언스란?
#- 데이터를 다루는 일(데이터가 많을수록 할 수 있는 게 많다.)

# 2. 데이터 사이언스가 무엇인가요?
# 가치를 더할 수 있는 일이 무언인지 찾아내고,
# 데이터를 이용해서 그 문제를 해결하는 것

# 3. 데이터 사이언스에 대한 오해
# 1번째 오해 : 데이터 사이언스의 핵심은 인공지능, 딥러닝이다.
# 데이터 사이언스에는 엄연히 순서가 있다. 기본기부터 차근히 다지기
# 2번째 오해 : 데이터 사이언티스트는 왠지 하루 종일 컴퓨터랑 수학만 하는 사람일 것 같다.
# 문제를 파악하는 인사이트도 길러야하고, 
# 내가 분석한 결과를 사람들에게 발표도 해야하며, 
# 여러 사람들과 커뮤니케이션도 해야 한다.

# 4. 왜 파이썬으로 데이터 사이언스?
# R : 통계와 시각화를 위해서 만들어진 언어
# Python : 다양한 분야에 사용할 수 있는 언어
# R : 통계와 시각화만을 위한 툴이 잘 만들어져 있음 
# Python : 다양한 분야에서 사용되기 때문에 응용하기 쉬움
# R vs Python : 파이썬 라이브러리가 많아지면서 파이썬이 앞서있음
# 파이썬은 간단하고 직관적이고, 처음 배우기 좋음, 다른 프로그래밍 분야로 넘어갈 수 있음
# 어떤 언어를 택할 지는 상황에 따라 다름-> 일반적으로는 파이썬 추천

'''
데이터 사이언스에는 어떤 단계들이 있을까요? 물론 상황과 분야에 따라 조금의 변동은 있겠지만, 대략적으로는 이런 순서로 진행됩니다.

1. 문제 정의하기
2. 데이터 모으기
3. 데이터 다듬기
4. 데이터 분석하기
5. 데이터 시각화 및 커뮤니케이션

문제 정의하기
-해결하고자 하는 문제를 정의합니다.

이 단계에서는 해결하고자 하는 게 무엇인지, 언제까지 어떤 결과물을 얻을 것인지, 어떤 방식으로 데이터를 활용할 것인지 등을 설정합니다. 아무 목적 없이 데이터를 살펴 보면, 의미 있는 발견을 하기 어려우니까요!

'목표 설정
'기간 설정
'평가 방법 설정
'필요한 데이터 설정

데이터 모으기
-필요한 데이터를 모을 수 있는 방법을 찾습니다.

누군가 이미 모아 놓은 데이터를 그대로 사용할 수도 있고, 공공 기관 등에서 배포한 자료를 찾아 볼 수도 있고, 혹은 웹사이트에서 직접 데이터를 수집할 수도 있습니다.

'웹 크롤링
'자료 모으기
'파일 읽고 쓰기

데이터 다듬기
-데이터의 퀄리티를 높여서 의미 있는 분석이 가능하게끔 합니다.

일반적으로 우리가 수집한 데이터에는 수많은 문제점들이 있습니다. 이런 문제점들로 인해 분석 자체가 불가능할 수도 있고, 혹은 분석을 하더라도 잘못된 결론으로 이어질 수도 있습니다.  “쓰레기를 넣으면 쓰레기가 나온다(garbage in, garbage out)”라는 표현이 있을 정도입니다.

'데이터 관찰하기
'데이터 오류 제거
'데이터 정리하기

데이터 분석하기
-준비된 데이터로부터 의미를 찾습니다.

이 과정은 통계를 이용해서 수치적으로도 할 수도 있고, 수십 가지의 그래프를 그려보면서 탐색할 수도 있습니다. 우리가 처음 설계했던 방식대로 데이터를 활용해서 원하는 결과를 도출해 내야 합니다!

'데이터 파악하기
'데이터 변형하기
'통계 분석
'인사이트 발견
'의미 도출

커뮤니케이션
-분석 결과를 다른 사람들에게 전달합니다.

어떤 문제를 해결하려 했는지, 어떻게 데이터를 모았는지, 어떤 방식으로 어떤 인사이트를 얻었는지 등을 다른 사람들에게 전달해야 합니다. 적절한 시각화를 통해 소통을 원활히 할 수 있습니다.

'다양한 시각화
'커뮤니케이션
'리포트
'''
# 1. numpy란?
# numerical(숫자와 관련한) python(파이썬 도구)

# 3. numpy array를 만드는 다양한 방법
import numpy
array1 = numpy.array([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])
print(array1)

array1 = numpy.full(6, 7) 
print(array1)

array1 = numpy.full(6, 0)
array2 = numpy.zeros(6, dtype=int)
print(array1)
print()
print(array2)

array1 = numpy.full(6, 1)
array2 = numpy.ones(6, dtype=int)
print(array1)
print()
print(array2)

array1 = numpy.random.random(6)
array2 = numpy.random.random(6)
print(array1)
print()
print(array2)

array1 = numpy.arange(6)
print(array1)

array1 = numpy.arange(2, 7)
print(array1)

array1 = numpy.arange(3, 17, 3)
print(array1)

# 1. pandas란?
# R : 통계를 위해 만들어진 언어, 데이터 분석의 도구가 잘 갖춰짐
# Python : 다양한 용도로 만들어진 언어, 데이터 분석의 도구가 평범
# R의 Dataframe == Python의 pandas
# numpy의 기능들은 이미 pandas에 포함 + a
# + 외부 데이터 읽고 쓰기
# + 정리된 데이터 새로운 파일에 저장
# + 데이터 시각화
# pandas = 데이터 사이언스의 필수 도구

# 2. dataframe 소개
# pandas의 dateframe = 2차원 형태의 데이터를 다루기 위한 자료형
# dataframe = 표 형식의 데이터를 담는 자료형
# 열 = column, 행 = row/index
# column = 데이터의 특징, row = 레코드
# numpy에서는 숫자만 다룰 수 있지만, pandas에서는 여러 자료형을 쓸 수 있어서 효율적
